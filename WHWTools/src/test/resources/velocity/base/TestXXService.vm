/**
 * Copyright(C) 2015-2025 杏仁科技
 * All rights reserved
 * ${date1} Created
 */
package ${modulePackage}.test.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.xingren.sdb.components.constants.CommonErrorCode;
import com.xingren.sdb.components.exception.ServiceException;
import com.xingren.sdb.components.result.BooleanResult;
import com.xingren.sdb.components.result.DefaultResult;
import ${modulePackage}.api.${serviceInt};
import ${modulePackage}.api.dto.${dtoName};
import ${modulePackage}.dao.${daoName};
import ${modulePackage}.model.${doName};

/**
 * <pre>
 * 测试
 * </pre>
 *
 * @author wwh
 * @date ${date2}
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:sdb-spring.xml" })
@Transactional
public class ${className} {

    private static final Logger log = LoggerFactory.getLogger(${className}.class);

    // @Spy
    // @Autowired
    @Mock
    private ${daoName} ${_daoName};

    @InjectMocks
    @Autowired
    private ${serviceInt} ${serviceName};

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testUpdate() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        String languageCode = "XX";
        ${dtoName} dto = new ${dtoName}();
        dto.${setIdName}(id);
        dto.setLanguageCode(languageCode);

        when(${_daoName}.updateByPrimaryKeySelective(any(${doName}.class))).thenReturn(1);

        BooleanResult ret = ${serviceName}.updateByPrimaryKeySelective(dto);

        assertTrue(ret.isSuccess());

        // 验证调用参数
        ArgumentCaptor<${doName}> argument = ArgumentCaptor.forClass(${doName}.class);

        verify(${_daoName}).updateByPrimaryKeySelective(argument.capture());
        
        assertEquals(languageCode, argument.getValue().getLanguageCode());
    }

    @Test(expected = ServiceException.class)
    public void testServiceException() {
        //anyLong();
#if($idType == 'Long')
        Long errId = 110L;
#else
        Integer errId = 110;
#end
        when(${_daoName}.selectByPrimaryKey(errId)).thenThrow(new RuntimeException());
        ${serviceName}.selectByPrimaryKey(errId);
    }

    @Test
    public void testSelectByPrimaryKey() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        String languageCode = "XX";
        ${doName} value = new ${doName}();

        value.${setIdName}(id);

        value.setLanguageCode(languageCode);
        when(${_daoName}.selectByPrimaryKey(id)).thenReturn(value);

        DefaultResult<${dtoName}> result = ${serviceName}.selectByPrimaryKey(id);

        assertNotNull("不应该返回null", result);

        ${dtoName} dto = result.getRealResult();

        assertEquals(languageCode, dto.getLanguageCode());

        verify(${_daoName}, times(1)).selectByPrimaryKey(id);

        // 测试不存在的

        result = ${serviceName}.selectByPrimaryKey(99#if($idType == 'Long')l#end);
        assertNotNull("不应该返回null", result);

        assertTrue(result.getErrorCodes().contains(CommonErrorCode.DB_NOT_FIND_RECORD));

    }

    @Test
    @Ignore
    public void testDeleteByPrimaryKey() {
#if($idType == 'Long')
        Long id = 99999999L;
#else
        Integer id = 99999999;
#end
        BooleanResult bRet = ${serviceName}.deleteByPrimaryKey(id);

        if (bRet.isSuccess()) {
            log.debug("删除成功");
        } else {
            log.debug("删除失败，错误代码：{}", bRet.getErrorCodes());
        }
    }
}
