/**
 * Copyright(C) 2015-2025 杏仁科技
 * All rights reserved
 * ${date1} Created
 */
package ${modulePackage}.test.dao;

import static org.junit.Assert.*;

import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import ${_package}.${daoName};
import ${modulePackage}.model.${doName};

/**
 * <pre>
 * 测试
 * </pre>
 *
 * @author wwh
 * @date ${date2}
 *
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:sdb-spring.xml" })
@Transactional
public class ${className} {

    private static final Logger log = LoggerFactory.getLogger(${className}.class);

    @Autowired
    private ${daoName} ${_daoName};

    @Test
    public void testDeleteByPrimaryKey() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        int ret = ${_daoName}.deleteByPrimaryKey(id);
        log.info("deleteByPrimaryKey( {} ) 受影响行数：{}", id, ret);
        if (ret > 0) {
            ${doName} rdo = ${_daoName}.selectByPrimaryKey(id);
            assertNull("deleteByPrimaryKey 删除失败", rdo);
        }
    }

    @Test
    public void testSelectByPrimaryKey() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        ${doName} rdo = ${_daoName}.selectByPrimaryKey(id);
        log.info("selectByPrimaryKey( {} )  查询到记录：{}", id, rdo);
    }

    @Test
    public void testSelectBySelective() {
        ${doName} record = new ${doName}();
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
         record.${setIdName}(id);
        
        List<${doName}> list = ${_daoName}.selectBySelective(record);
        log.info("selectBySelective 查询到记录：{}", list.size());
    }

    @Test
    public void testChangeValidByPKey() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        int ret = ${_daoName}.changeValidByPKey(id, 3);
        log.info("testChangeValidByPKey( {} , 3 ) 受影响行数：{}", id, ret);
        if (ret > 0) {
            ${doName} rdo = ${_daoName}.selectByPrimaryKey(id);
            assertNotNull("changeValidByPKey 更新了不存在的记录", rdo);
            assertTrue("changeValidByPKey 更新失败", rdo.getIfValid() == 3);
        }
    }

    @Test
    public void testUpdateByPrimaryKeySelective() {
#if($idType == 'Long')
        Long id = 1L;
#else
        Integer id = 1;
#end
        ${doName} record = new ${doName}();
        record.${setIdName}(id);
        record.setIfValid(1);
        
        int ret = ${_daoName}.updateByPrimaryKeySelective(record);
        log.info("updateByPrimaryKeySelective( {} ) 受影响行数：{}", id, ret);
        if (ret > 0) {
            ${doName} rdo = ${_daoName}.selectByPrimaryKey(id);
            assertNotNull("updateByPrimaryKeySelective 更新了不存在的记录", rdo);

            // 继续条件查询
            List<${doName}> list = ${_daoName}.selectBySelective(record);
            assertTrue("selectBySelective 查询失败", list.size() > 0);

        }
    }
}
