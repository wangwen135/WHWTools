/**
 * Copyright(C) 2015-2025 杏仁科技
 * All rights reserved
 * ${date1} Created
 */
package ${modulePackage}.service.impl;

import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xingren.sdb.components.constants.CommonConstants.Valid;
import com.xingren.sdb.components.constants.CommonErrorCode;
import com.xingren.sdb.components.constants.SdbModule;
import com.xingren.sdb.components.exception.ServiceException;
import com.xingren.sdb.components.log.Logger;
import com.xingren.sdb.components.result.BooleanResult;
import com.xingren.sdb.components.result.DefaultResult;
import com.xingren.sdb.components.utils.SpringBeanUtils;
import ${modulePackage}.api.${intClassName};
import ${modulePackage}.api.dto.${dtoName};
import ${modulePackage}.dao.${daoName};
import ${modulePackage}.model.${doName};

/**
 * <pre>
 * 服务实现
 * </pre>
 *
 * @author wwh
 * @date ${date2}
 *
 */
@Service("${serviceName}")
public class ${className} implements ${intClassName} {

    @Autowired
    private ${daoName} ${_daoName};

    @Autowired
    private Validator validator;
    
    @Override
    public BooleanResult deleteByPrimaryKey(${idType} ${idName}) {
        BooleanResult bRet = new BooleanResult();
        try {
            int ret = ${_daoName}.deleteByPrimaryKey(${idName});
            if (ret < 1) {
                bRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            }
            return bRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "根据主键删除时发生异常", e, ${idName});
            throw new ServiceException(e);
        }
    }

    @Override
    public DefaultResult<${idType}> insert(${dtoName} dto) {
        DefaultResult<${idType}> dRet = new DefaultResult<${idType}>();
        ${doName} baseDo = new ${doName}();
        try {
            // DTO转DO
            SpringBeanUtils.copyProperties(dto, baseDo);

           // 验证
            Set<ConstraintViolation<${doName}>> constraintViolation = validator.validate(baseDo);
            if (!constraintViolation.isEmpty()) {
                for (ConstraintViolation<${doName}> cv : constraintViolation) {
                    dRet.addErrorMessage(CommonErrorCode.PARAMS_INVALID, cv.getPropertyPath() + "  " + cv.getMessage());
                }
                return dRet;
            }

            int ret = ${_daoName}.insert(baseDo);
            if (ret < 1) {
                dRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            } else {
                dRet.setRealResult(baseDo.${getIdName}());// 获取插入ID
            }
            return dRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "插入时发生异常", e, dto);
            throw new ServiceException(e);
        }

    }

    @Override
    public DefaultResult<${idType}> insertSelective(${dtoName} dto) {
        DefaultResult<${idType}> dRet = new DefaultResult<${idType}>();
        ${doName} baseDo = new ${doName}();
        try {
            // DTO转DO
            SpringBeanUtils.copyProperties(dto, baseDo);

            // 验证
            Set<ConstraintViolation<${doName}>> constraintViolation = validator.validate(baseDo);
            if (!constraintViolation.isEmpty()) {
                for (ConstraintViolation<${doName}> cv : constraintViolation) {
                    dRet.addErrorMessage(CommonErrorCode.PARAMS_INVALID, cv.getPropertyPath() + "  " + cv.getMessage());
                }
                return dRet;
            }
            
            int ret = ${_daoName}.insertSelective(baseDo);
            if (ret < 1) {
                dRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            } else {
                dRet.setRealResult(baseDo.${getIdName}());// 获取插入ID
            }
            return dRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "选择性插入时发生异常", e, dto);
            throw new ServiceException(e);
        }

    }

    @Override
    public DefaultResult<${dtoName}> selectByPrimaryKey(${idType} ${idName}) {
        DefaultResult<${dtoName}> dRet = new DefaultResult<${dtoName}>();
        ${dtoName} dto = new ${dtoName}();
        try {
            ${doName} baseDo = ${_daoName}.selectByPrimaryKey(${idName});
            if (baseDo == null) {
                dRet.addErrorCode(CommonErrorCode.DB_NOT_FIND_RECORD);
                return dRet;
            }

            SpringBeanUtils.copyProperties(baseDo, dto);
            dRet.setRealResult(dto);
            return dRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "根据主键查询时发生异常", e, ${idName});
            throw new ServiceException(e);
        }
    }

    @Override
    public BooleanResult updateByPrimaryKeySelective(${dtoName} dto) {
        BooleanResult bRet = new BooleanResult();
        ${doName} baseDo = new ${doName}();
        try {
            // DTO转DO
            SpringBeanUtils.copyProperties(dto, baseDo);

            int ret = ${_daoName}.updateByPrimaryKeySelective(baseDo);
            if (ret < 1) {
                bRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            }
            return bRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "根据主键选择性更新时发生异常", e, dto);
            throw new ServiceException(e);
        }
    }

    @Override
    public BooleanResult updateByPrimaryKey(${dtoName} dto) {
        BooleanResult bRet = new BooleanResult();
        ${doName} baseDo = new ${doName}();
        try {
            // DTO转DO
            SpringBeanUtils.copyProperties(dto, baseDo);

            int ret = ${_daoName}.updateByPrimaryKey(baseDo);
            if (ret < 1) {
                bRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            }
            return bRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "根据主键更新时发生异常", e, dto);
            throw new ServiceException(e);
        }
    }

    @Override
    public DefaultResult<List<${dtoName}>> selectBySelective(${dtoName} dto) {
        DefaultResult<List<${dtoName}>> dRet = new DefaultResult<List<${dtoName}>>();

        ${doName} baseDo = new ${doName}();
        try {
            // DTO转DO
            SpringBeanUtils.copyProperties(dto, baseDo);
            List<${doName}> listDo = ${_daoName}.selectBySelective(baseDo);

            if (listDo == null) {
                dRet.addErrorCode(CommonErrorCode.DB_NOT_FIND_RECORD);
                return dRet;
            }
            // DO转DTO
            List<${dtoName}> result = SpringBeanUtils.copyPropertiesForList(listDo, ${dtoName}.class);
            dRet.setRealResult(result);
            return dRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "选择性查询时发生异常", e, dto);
            throw new ServiceException(e);
        }
    }

    @Override
    public BooleanResult changeValidByPKey(${idType} ${idName}, Valid valid) {
        BooleanResult bRet = new BooleanResult();
        try {
            int ret = ${_daoName}.changeValidByPKey(${idName}, valid.getValue());
            if (ret < 1) {
                bRet.addErrorCode(CommonErrorCode.DB_AFFECTED_ROWS_ZORE);
            }
            return bRet;
        } catch (Exception e) {
            Logger.exp(SdbModule.FEED, "根据主键 启用/禁用 记录时发生异常", e, ${idName});
            throw new ServiceException(e);
        }
    }

}
